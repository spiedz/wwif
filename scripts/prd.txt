# Product Requirements Document (PRD)

## Project Name
Where Was It Filmed (WWIF)

## Overview
WWIF is a content-driven, SEO-optimized website that allows users to explore the real-world filming locations of popular movies and TV shows. The site supports Markdown-based content input and features a Google Maps integration for visualizing each location. It also allows users to leave comments under each film or blog page â€” without needing to create an account.

## Goals
- Display accurate and engaging content for film and TV filming locations.
- Support easy content management by adding Markdown files.
- Rank highly on search engines with proper metadata and structure.
- Encourage engagement through simple, profile-free commenting.
- Maintain a clean, mobile-responsive UI using Tailwind CSS.
- Host with minimal setup using Vercel for auto-deploy and scaling.

## Tech Stack
- **Framework**: Next.js (React, TypeScript)
- **Styling**: Tailwind CSS (red / white / gray theme)
- **Maps**: Google Maps API
- **Content Format**: Markdown with frontmatter (stored in `/content/films/` and `/content/blog/`)
- **Comments**: Name + comment only (stored via Supabase, Firebase, or flat file)
- **Hosting**: Vercel

## Features

### 1. Content Structure
- Markdown files are added to `/content/films/` or `/content/blog/`.
- Each Markdown file includes:
  - `title`
  - `description`
  - `slug`
  - `year`
  - `genre`
  - `director`
  - `categories`
  - `coordinates` (for map)
- Files are auto-routed to `/films/[slug]` and `/blog/[slug]`.

### 2. Pages and Layouts
- `FilmPage.tsx`: Displays film intro, map, locations, trivia, travel tips, and comments.
- `BlogPost.tsx`: Displays blog article content and user comments.
- `Map.tsx`: Google Map with multiple markers from coordinates.
- `LocationCard.tsx`: Displays each filming location.
- `AffiliateLink.tsx`: Optional call-to-action (e.g. Amazon or streaming).
- `CommentSection.tsx`: Displays name + comment form and existing thread.

### 3. Comments
- Visitors can leave comments using just their name and message.
- Comments are displayed on the page with no login or profile system.
- Stored in a lightweight backend (Firebase, Supabase, or JSON flat files).

### 4. SEO & Metadata
- Dynamic meta tags pulled from frontmatter:
  - `<title>`, `<meta description>`
  - Open Graph & Twitter Card
  - JSON-LD schema (`Movie`, `Place`, `Article`)
- Sitemap and robots.txt for indexing.

### 5. Mobile & UX
- Fully responsive using Tailwind's utility-first classes.
- Red for primary CTAs and highlights.
- Clean layouts with white backgrounds and gray for secondary UI.
- Mobile-friendly layout for all pages, including map and comments.

## Hosting & Deployment
- **Platform**: Vercel
- Push to GitHub triggers automatic deployment.
- Supports environment variables (e.g., `GOOGLE_MAPS_API_KEY`).
- Supports dynamic routes and static generation for fast performance.

## Color Palette
- **Primary Red**: #D32F2F
- **White**: #FFFFFF
- **Light Gray**: #F5F5F5
- **Dark Gray**: #424242

# Blog Post Enhancement PRD for Where Was It Filmed

## Project Overview
The Where Was It Filmed (WWIF) website showcases filming locations for movies and TV shows. The blog section currently has a basic layout that needs enhancement to make it more engaging, similar to the film pages.

## Current State
The blog posts currently have a simple format with:
- Featured image and title at the top
- Author and date metadata
- Simple content area with limited styling
- Basic sharing options
- Placeholder for related posts section

## Enhancement Goals
We need to update the blog format to make it more engaging by:
1. Improving the visual layout and typography
2. Adding a table of contents for longer posts
3. Creating better styling for quotes, lists, and code blocks
4. Supporting image galleries within blog posts
5. Adding support for embedded maps showing filming locations
6. Including author information with photo and bio
7. Implementing a proper related posts section

## Technical Requirements

### Core Visual Layout
- Create a more visually appealing header section with gradient overlays
- Implement better typography for headings and body text
- Add custom styling for lists, blockquotes, and other content elements
- Support theme-consistent formatting for all blog elements

### Content Organization
- Add a table of contents component for longer posts
- Implement better section headings with anchor links
- Create styled information boxes for tips, warnings, and notes
- Add support for image galleries with captions
- Include map embedding capabilities to show filming locations

### Related Content
- Create an actual related posts component based on categories
- Add a proper author section with photo and bio
- Implement better sharing options with social media preview

### Performance Considerations
- Ensure lazy loading for images
- Optimize typography for readability and performance
- Maintain accessibility standards

## Success Criteria
- Blog posts should have a professional, modern appearance
- Content should be easier to navigate, especially for longer posts
- Visual elements should enhance the content without being distracting
- The enhanced blog format should drive higher engagement and time on page 

# Where Was It Filmed - About Page Feature

## Overview
Create an engaging and informative About page for the Where Was It Filmed (WWIF) website. This page will explain the purpose of the site, showcase the team behind it, and highlight the site's mission and vision.

## Requirements

### Core Features
1. Accessible at `/about` URL path
2. Responsive design matching the site's existing aesthetic
3. SEO-optimized with appropriate metadata
4. Clear explanation of the site's purpose and mission
5. Team member section with photos and bios
6. Contact information and social media links
7. History of the site's development
8. Information about how the site collects and verifies film location data

### Page Sections
1. **Hero Section**: Engaging header with title and brief introduction
2. **Mission Statement**: Core purpose of WWIF with compelling visuals
3. **Team Section**: Photos and bios of key team members
4. **History Timeline**: How the project evolved
5. **Methodology**: How locations are researched and verified
6. **Contact Information**: Ways to reach out, including a simple contact form
7. **Social Media Links**: Connect with WWIF on various platforms
8. **FAQ Section**: Common questions about the site

### Design Requirements
- Follow existing site color scheme (primary: red #D32F2F, background: white, accent: light/dark gray)
- Include relevant images and icons
- Maintain the same header and footer as other pages
- Use animations and transitions consistent with the site's style
- Ensure full mobile responsiveness

### Technical Requirements
- Implement using Next.js and React components
- Style with Tailwind CSS
- Include proper SEO metadata and JSON-LD
- Add the About link to the site navigation
- Ensure accessibility compliance (WCAG standards)
- Optimize all images for web

## Success Criteria
- Page loads within 2 seconds
- Passes Google Lighthouse audit with score >90
- All content is readable on devices from mobile to desktop
- Navigation between About and other pages is seamless
- Site purpose is immediately clear to first-time visitors 

# Google AdSense Integration for Where Was It Filmed Website

## Overview
The Where Was It Filmed (WWIF) website needs to implement Google AdSense to monetize the site through targeted advertisements. This PRD outlines the requirements for integrating Google AdSense with the existing Next.js website while maintaining a good user experience, optimizing ad placement, and ensuring compliance with Google's policies.

## Requirements

### Technical Implementation
1. Integrate the Google AdSense script in the website's head section
2. Create reusable ad components for different ad formats (horizontal, vertical, responsive)
3. Implement ad placement strategies for different pages (homepage, film pages, blog posts)
4. Handle ad loading performance to minimize impact on Core Web Vitals
5. Implement ad-blockers detection and graceful fallback

### Ad Placement Strategy
1. Top banner ads on main sections (home, films, blog)
2. Sidebar/rail ads on content pages
3. In-content ads on long-form content (blog posts, film details)
4. Footer ads across all pages
5. Implement responsive design for ads on mobile devices

### Compliance & Policy
1. Implement cookie consent for GDPR compliance related to personalized ads
2. Add privacy policy disclosures about ads and tracking
3. Ensure compliance with Google AdSense program policies
4. Implement proper ad labeling where required

### Testing & Optimization
1. Implement analytics to track ad performance
2. A/B testing different ad placements
3. Monitor and optimize page load performance with ads
4. Test ads on all target devices and browsers

### Future Considerations
1. Auto-ads implementation evaluation
2. Ad refresh strategies for longer user sessions
3. Advanced targeting options based on film categories

## Technical Specifications

### AdSense Script Implementation
The base AdSense script must be added to the Next.js app in a way that ensures it loads on all pages without duplicating:

```html
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-1419518181504900" crossorigin="anonymous"></script>
```

### Ad Component Architecture
- Create a flexible `AdUnit` component that can be reused across the site
- Component should handle different sizes, formats, and responsive behavior
- Implement lazy loading for ads below the fold

## Success Criteria
1. All ads render correctly on all pages and device sizes
2. Website performance metrics remain within acceptable range
3. Ad consent mechanism works properly for all visitors
4. Google AdSense account shows active ads being served
5. No policy violations in Google AdSense dashboard

## Timeline
1. Initial implementation of AdSense script and basic ad units: 1 week
2. Placement optimization and performance testing: 1 week
3. Compliance and policy implementation: 3 days
4. Testing and refinement: 4 days 

# Film Search Feature PRD

## Overview
Implement a comprehensive search feature for the "Where Was It Filmed" website that allows users to search for films by title, location, and other relevant metadata. The search should be intuitive, fast, and enhance the overall user experience.

## Requirements

### Core Search Functionality
- Create a responsive search UI with an input field and search button
- Implement real-time search suggestions as users type
- Search should query across multiple film attributes:
  - Film titles
  - Filming locations (cities, landmarks, countries)
  - Year of release
  - Director
  - Genre

### Search Results Page
- Design and implement a dedicated search results page
- Display search results with film thumbnails and basic information
- Include pagination or infinite scroll for handling large result sets
- Allow filtering of search results by categories (year, genre, location)
- Show "No results found" with suggestions when appropriate

### Search Implementation
- Build a client-side search index for fast results
- Ensure search is case-insensitive and handles partial matches
- Implement fuzzy search to account for typos and misspellings
- Add highlighting of matched terms in the search results
- Store recent search history in local storage

### UI/UX Requirements
- The search bar should be accessible from every page
- Mobile-friendly design with appropriate touch targets
- Implement loading states to indicate search is in progress
- Use animation for a polished experience
- Maintain the site's existing design language and color scheme

### Performance Requirements
- Search results should appear within 300ms
- Lazy load images in search results
- Implement debounce for search input to avoid excessive re-rendering
- Optimize bundle size for any new dependencies

## Technical Constraints
- Build using the existing Next.js framework
- Search should work client-side without requiring a dedicated backend
- Use TypeScript for all new components
- Follow existing component structure and naming conventions
- Implement appropriate unit tests for search functionality

## Success Metrics
- Search feature correctly returns all relevant films
- Users can find films by partial name or location matches
- UI remains responsive during search operations
- Search index updates when new films are added to the site

## Timeline
- Design: 1-2 days
- Implementation: 3-5 days
- Testing: 1-2 days
- Refinement: 1 day

## Future Enhancements (Not in initial scope)
- Advanced filtering options
- Voice search capabilities
- Search analytics to track popular queries
- Personalized search based on user history 

# Where Was It Filmed (WWIF) Bug Fixing PRD

## Project Overview
Fix critical bugs in the "Where Was It Filmed" website to ensure proper functionality of search features, film page display, and deployment.

## Problem Statement
The website is experiencing several critical issues:
1. YAML parsing errors in film markdown files, particularly in "where-was-the-lord-of-the-rings-filmed.md"
2. Build failures during deployment
3. Null coordinate handling issues in location displays
4. Other potential issues with film content

## Goals
- Fix YAML syntax in all film markdown files
- Address null handling in location coordinates
- Ensure all film pages load properly
- Fix build process for successful deployment

## Project Requirements

### Bug Fixes
1. **YAML Parsing Errors**
   - Identify and fix YAML formatting issues in film markdown files
   - Ensure all frontmatter is properly structured
   - Pay special attention to the Lord of the Rings film file which has known issues

2. **Null Coordinate Handling**
   - Add proper null checks before accessing properties like lat/lng in LocationCard and FilmLocationsGuide
   - Fix any instances of toFixed() on potentially null values
   - Ensure map links work correctly with coordinates

3. **Image Configuration**
   - Fix image loading by ensuring all required domains are added to next.config.js
   - Update configuration to use recommended remotePatterns instead of domains

4. **Search Functionality**
   - Test and fix any issues with the search feature
   - Ensure proper display of film titles in search results

### Deployment Requirements
- All pages must build successfully without errors
- Static generation should work for all routes
- No console errors should appear during build

## Success Criteria
- Vercel deployment completes successfully
- All film pages load correctly
- Search functionality works properly
- No YAML parsing errors in the logs
- Map and coordinate displays handle null values gracefully 

# Where Was It Filmed - TV Series Feature

## Overview
Add TV series support to the "Where Was It Filmed" website, which previously only supported movies. This will include creating data models, APIs, and UI components specifically for TV series content.

## Requirements

### Data Model
- Create a TV Series data model with fields for title, description, seasons, episodes, filming locations, etc.
- Support for ongoing series with open-ended release dates
- Store series metadata like creator, genres, release years
- Support multiple filming locations per series

### API Implementation
- Create API endpoints for retrieving TV series data
- Update search functionality to include series
- Support filtering search results by content type (film or series)

### UI Components
- Series listing page showing all available TV series
- Series detail page showing filming locations
- Series Card component for displaying series in lists
- Update navigation to include TV series section

### Search Integration
- Add TV series to global search results
- Support filtering search by content type
- Add appropriate metadata for TV series search results

## Existing Implementation
Several components have already been implemented:
- Data models in src/types/series.ts
- Updated markdown.ts to handle TV series content
- Example content files for series like "Stranger Things" and "Game of Thrones"
- UI components like SeriesLocationsGuide.tsx
- Added pages for series listings and individual series
- Updated navigation to include TV series

## Current Bugs
- JSON serialization issue with releaseYearEnd property
- Next.js Link component issues with nested <a> tags
- TypeScript errors in various files

## Success Criteria
- Users can browse TV series filming locations
- Search functionality properly includes TV series results
- No TypeScript errors or console warnings
- All pages render correctly without errors 

# TV Series Feature Bug Fix

## Project Overview
Where Was It Filmed (WWIF) is a website showcasing real filming locations of popular movies and TV shows. The website currently has a bug in the TV Series feature that needs to be fixed.

## Current Issues
1. The main series listing page at `/series` has an error in the SEO component where the SEO component fails with "Cannot use 'in' operator to search for 'genre' in undefined".
2. The individual series page `/series/[slug]` needs to be updated to match the same SEO component pattern used in other pages.
3. A standardized template for adding new TV series is missing from the content templates collection.

## Requirements
1. Fix the SEO component usage in `/series/index.tsx` to properly provide all required meta fields.
2. Update the SEO component usage in `/series/[slug].tsx` to match the same pattern.
3. Create a series template file in the content/templates directory to make it easier to add new series in the future.
4. Test the fixes by running the app and navigating to the series pages.

## Technical Specifications
- The SEO component requires a properly structured meta object with at least title, description, and slug fields.
- The series pages need to match the existing patterns used in film and blog pages.
- The template should follow the same structure as the existing TV series files.

## Success Criteria
1. Navigating to `/series` loads without errors.
2. Navigating to individual series pages like `/series/where-was-stranger-things-filmed` works correctly.
3. The template makes it easy to add new TV series content.
4. All SEO features function correctly on series pages. 